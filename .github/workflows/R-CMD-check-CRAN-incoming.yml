# Workflow derived from https://github.com/r-lib/actions/tree/v2/examples
# Need help debugging build failures? Start at https://github.com/r-lib/actions#where-to-find-help
on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]
  schedule:
    - cron: '0 5 * * 1'

name: R-CMD-check-CRAN-incoming.yaml

permissions: read-all

jobs:
  R-CMD-check:
    runs-on: ${{ matrix.config.os }}
    timeout-minutes: 25
    name: ${{ matrix.config.os }} (${{ matrix.config.r }})

    strategy:
      fail-fast: false
      matrix:
        config:
          - {os: macos-latest,   r: 'devel'}
          - {os: windows-latest, r: 'devel'}
          - {os: ubuntu-latest,  r: 'devel', http-user-agent: 'release'}

    env:
      GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}
      R_KEEP_PKG_SOURCE: yes

    steps:
      - uses: actions/checkout@v4

      - uses: r-lib/actions/setup-pandoc@v2

      - uses: r-lib/actions/setup-r@v2
        with:
          r-version: ${{ matrix.config.r }}
          http-user-agent: ${{ matrix.config.http-user-agent }}
          use-public-rspm: true

      - uses: r-lib/actions/setup-r-dependencies@v2
        with:
          extra-packages: any::rcmdcheck, any::crayon
          needs: check

      - name: Install aspell on Windows
        if: ${{ runner.os=='Windows' }}
        run: |
          pacman -S --noconfirm aspell aspell-en

      - name: Install aspell on Ubuntu
        if: ${{ runner.os=='Linux' }}
        run: |
          sudo apt-get update && sudo apt-get install -y aspell aspell-en

      - name: Install aspell on macOS
        if: ${{ runner.os=='macOS' }}
        run: |
          brew install aspell

      - name: R CMD check (CRAN incoming)
        id: rcmdcheck
        run: |
          cat("::group::Run R CMD check with CRAN incoming env vars")
          options(crayon.enabled = TRUE)
          cat("LOGNAME=", Sys.info()[["user"]], "\n", sep = "", file = Sys.getenv("GITHUB_ENV"), append = TRUE)
          Sys.setenv("_R_CHECK_FORCE_SUGGESTS_" = "false")
          Sys.setenv("_R_CHECK_CRAN_INCOMING_" = "true")
          Sys.setenv("_R_CHECK_CRAN_INCOMING_REMOTE_" = "true")
          Sys.setenv("_R_CHECK_CRAN_INCOMING_USE_ASPELL_" = "true")
          cat("check-dir-path=", file.path(getwd(), "check"), "\n", file = Sys.getenv("GITHUB_OUTPUT"), sep = "", append = TRUE)
          check_results <- rcmdcheck::rcmdcheck(args = c("--no-manual", "--as-cran"), build_args = c("--no-manual", "--compact-vignettes=gs+qpdf"), error_on = "note", check_dir = "check")
        shell: Rscript {0}
        working-directory: ${{ inputs.working-directory }}

      - name: Upload snapshots
        if: ${{ (failure() && inputs.upload-snapshots == 'always') || inputs.upload-snapshots != 'false' }}
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.snapshot-artifact-name || format('{0}-{1}-r{2}-{3}-testthat-snapshots', runner.os, runner.arch, matrix.config.r, matrix.config.id || strategy.job-index ) }}
          path: ${{ steps.rcmdcheck.outputs.check-dir-path }}/**/00check.log
          if-no-files-found: ignore
